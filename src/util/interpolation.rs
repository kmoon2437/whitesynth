/**
 * 보간 관련 함수
 * --- 변수명 설명 ---
 * - t: v0을 기준으로 한 위치(v0과 v1 사이의 간격을 1로 함). 범위는 때에 따라 달라짐
 * - vbn: 기준점으로부터 n개만큼 퇴보한(?) 샘플
 * - ...
 * - vb2: vb1의 이전 샘플
 * - vb1: v0의 이전 샘플
 * - v0: 기준점이 되는 샘플
 * - v1: v0의 다음 샘플
 * - v2: v1의 다음 샘플
 * - ...
 * - vn: 기준점으로부터 n개만큼 진행된(?) 샘플
 * 
 * 라그랑주 보간 관련 참고자료:
 * - https://phy64ev1.tistory.com/13
 */

/**
 * 선형 보간: 제일 단순함
 * 0 <= t <= 1
 */
pub fn interpolate_linear(t: f64, v0: f64, v1: f64) -> f64 {
    // (1.0 - t) * v0 + t * v1 라는 직관적인 식이 있지만
    // 연산량을 조금이라도 줄이기 위해 아래 식을 씀
    return v0 + t * (v1 - v0);
}

/**
 * 라그랑주 3차다항식 보간
 * -1 <= t <= 2
 */
pub fn interpolate_cubic(t: f64, vb1: f64, v0: f64, v1: f64, v2: f64) -> f64 {
    /*
     * (-1.0, vb1)
     * (0.0, v0)
     * (1.0, v1)
     * (2.0, v2)
     * 위 네 점을 지나는 t에 대한 3차다항식을 만든다
     */

    let coeff0 = (t * (t - 1.0) * (t - 2.0)) / -6.0;
    let coeff1 = ((t * t - 1.0) * (t - 2.0)) / 2.0;
    let coeff2 = ((t + 1.0) * t * (t - 2.0)) / -2.0;
    let coeff3 = ((t * t - 1.0) * t) / 6.0;

    return coeff0 * vb1
        + coeff1 * v0
        + coeff2 * v1
        + coeff3 * v2;
}